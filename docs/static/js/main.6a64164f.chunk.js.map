{"version":3,"sources":["context/darkmode.js","context/alertContext.js","component/util/Switch.jsx","component/util/Navbar.jsx","component/item/NavbarComponent.jsx","component/page/Home.jsx","component/util/Alert.jsx","component/util/Accordion.jsx","component/page/About.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["ThemeContext","React","createContext","darkMode","setDarkMode","AlertContext","Switch","props","setAlert","useContext","className","children","style","padding","value","htmlFor","id","anim","type","checked","onChange","defaultProps","Navbar","stickyTop","mode","fontFamily","to","NavbarLink","exact","activeClassName","NavbarComponent","Home","theme","useState","text","setText","minHeight","rows","e","target","split","filter","length","onClick","toLocaleUpperCase","toLocaleLowerCase","join","window","navigator","clipboard","writeText","Alert","height","role","Accordion","AccordionItem","header","expanded","parentId","darkTheme","About","context","App","alert","Provider","msg","setTimeout","basename","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a64164f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const ThemeContext = React.createContext({\r\n    darkMode: false,\r\n    setDarkMode: null\r\n})","import React from 'react'\r\n\r\nconst AlertContext = React.createContext(null)\r\n\r\nexport default AlertContext;","import React, { useContext } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport AlertContext from '../../context/alertContext'\r\n\r\nconst Switch = props => {\r\n    const setAlert = useContext(AlertContext)\r\n    return (\r\n        <div className=\"form-check form-switch\">\r\n            {props.children && <label style={{padding: '4px'}} className={`form-check-label text-${props.value? \"light\": \"dark\"}`} htmlFor={props.id}> &nbsp; {props.children}</label>}\r\n            <input className={`${props.anim && \"anim\"} form-check-input`} type=\"checkbox\" id={props.id} checked={props.value} onChange={() => { props.onChange(!props.value); setAlert(`${!props.value ? \"Darkmode\" : \"Lightmode\"} enabled`) }} />\r\n        </div>\r\n    )\r\n}\r\n\r\nSwitch.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    anim: PropTypes.bool,\r\n}\r\n\r\nSwitch.defaultProps = {\r\n    anim: false\r\n}\r\n\r\nexport default Switch\r\n","import PropTypes from 'prop-types'\r\nimport React, { useContext } from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { ThemeContext } from '../../context/darkmode'\r\nimport Switch from './Switch'\r\n\r\nexport const Navbar = ({ children, stickyTop }) => {\r\n\r\n    const darkMode = useContext(ThemeContext)\r\n    const mode = darkMode.darkMode ? \"dark\" : \"light\"\r\n\r\n    return (\r\n        <nav className={`navbar navbar-expand-md navbar-${mode} bg-${mode} ${stickyTop && \"sticky-top\"}`} style={{ fontFamily: \"'Roboto Slab', serif\" }} >\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">Text Utility</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-md-0\">\r\n                        {children}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <Switch anim id=\"darkmodeswitch\" value={darkMode.darkMode} onChange={darkMode.setDarkMode} >{darkMode.darkMode ? \"Dark Mode\" : \"Light Mode\"}</Switch>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport const NavbarDropdown = ({ name, id, children }) => {\r\n    return (\r\n        <li className=\"nav-item dropdown\">\r\n            <a className=\"nav-link dropdown-toggle\" href=\"/\" id={id} role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                {name}\r\n            </a>\r\n            <ul className=\"dropdown-menu\" aria-labelledby={id}>\r\n                {children}\r\n            </ul>\r\n        </li>\r\n    )\r\n}\r\n\r\nNavbarDropdown.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n}\r\n\r\n\r\n\r\n\r\nexport const NavbarDropdownLink = ({ to, children }) => {\r\n    return (\r\n        <li><Link className=\"dropdown-item\" to={to}>{children}</Link></li>\r\n    )\r\n}\r\n\r\nNavbarDropdownLink.propTypes = {\r\n    to: PropTypes.string.isRequired,\r\n}\r\n\r\nexport const NavbarLink = ({ to, children }) => {\r\n    return (\r\n        <li className=\"nav-item\">\r\n            <NavLink className=\"nav-link\" exact to={to} activeClassName=\"active\">{children}</NavLink>\r\n        </li>\r\n    )\r\n}\r\n\r\nNavbarLink.propTypes = {\r\n    to: PropTypes.string.isRequired,\r\n}\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Navbar, NavbarLink } from '../util/Navbar'\r\n\r\nconst NavbarComponent = props => {\r\n    return (\r\n        <Navbar stickyTop={props.stickyTop}>\r\n            <NavbarLink to=\"/\">Home</NavbarLink>\r\n            <NavbarLink to=\"/about\">About</NavbarLink>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nNavbarComponent.propTypes = {\r\n    stickyTop: PropTypes.bool,\r\n}\r\n\r\nNavbarComponent.defaultProps = {\r\n    stickyTop: true,\r\n}\r\n\r\nexport default NavbarComponent\r\n","import React, { useContext, useState } from 'react'\r\nimport AlertContext from '../../context/alertContext'\r\nimport { ThemeContext } from '../../context/darkmode'\r\n\r\nconst Home = () => {\r\n\r\n    const theme = useContext(ThemeContext)\r\n    const setAlert = useContext(AlertContext)\r\n    const [text, setText] = useState(\"\")\r\n\r\n    const clearText = e => {\r\n        setText(\"\");\r\n        text.length!==0 && setAlert('Text cleared')\r\n    }\r\n\r\n    const toUpperCase= e => {\r\n        setText(text.toLocaleUpperCase())\r\n        text.length!==0 && setAlert(\"Text convered to uppercase\")\r\n    }\r\n    \r\n    const toLowerCase= e => {\r\n        setText(text.toLocaleLowerCase())\r\n        text.length!==0 && setAlert(\"Text convered to lowercase\")\r\n    }\r\n\r\n    const copyToClipboard = e => {\r\n        window.navigator.clipboard.writeText(text)\r\n        text.length!==0 && setAlert(\"Text copied  to clipboard\")\r\n    }\r\n\r\n    const removeExtraSpace = e => {\r\n        setText(text.split(/\\s+/).filter(e =>{ return e.length !== 0}).join(\" \"))\r\n        text.length!==0 && setAlert(\"Extra space removed\")\r\n    }\r\n\r\n    const calculateWords= () => {\r\n        return `${text.split(/\\s+/).filter(e => {return e.length !== 0}).length}`\r\n    }\r\n\r\n    return (\r\n        <div className={`${theme.darkMode && \"bg-secondary text-light\"}`} style={{ minHeight: \"85.4vh\" }}>\r\n            <div className={`p-4 container `}>\r\n                <h2 className=\"p-2 text-center heading\">Text Utility</h2>\r\n                <label htmlFor=\"textInput\" className=\"form-label hand-written\">Enter Your Text</label>\r\n                <textarea className={`form-control ${theme.darkMode && \"bg-secondary text-light\"}`} id=\"textInput\" rows=\"6\" value={text} onChange={(e) => setText(e.target.value)}></textarea>\r\n                <p className=\"mx-2 my-3 hand-written\">Words : {calculateWords()} &emsp;&emsp; Characters : {text.length}</p>\r\n                <button type=\"button\" className=\"py-2 px-3 m-2 btn btn-primary\" onClick={toUpperCase}>Uppercase</button>\r\n                <button type=\"button\" className=\"py-2 px-3 m-2 btn btn-success\" onClick={toLowerCase}>Lowercase</button>\r\n                <button type=\"button\" className=\"py-2 px-3 m-2 btn btn-info\" onClick={removeExtraSpace}>Remove extra space</button>\r\n                <button type=\"button\" className=\"py-2 px-3 m-2 btn btn-warning\" onClick={copyToClipboard}>Copy</button>\r\n                <button type=\"button\" className=\"py-2 px-3 m-2 btn btn-danger\" onClick={clearText}>Clear</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import React, { useContext } from 'react'\r\nimport { ThemeContext } from '../../context/darkmode'\r\n\r\nconst Alert = ({ children }) => {\r\n    const theme = useContext(ThemeContext)\r\n    return (\r\n        <div style={{ height: \"40px\" }} className={` ${theme.darkMode && \"bg-secondary\"}`}>\r\n            {children && <div className=\"alert alert-success\" role=\"alert\">{children}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nAlert.propTypes = {\r\n\r\n}\r\n\r\nexport default Alert\r\n","import React, {useContext} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { ThemeContext } from '../../context/darkmode'\r\n\r\nexport const Accordion = ({id,children}) => {\r\n    return (\r\n        <div className=\"accordion\" id={id}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const AccordionItem = ({header,id,expanded,children,parentId}) => {\r\n    const darkTheme = useContext(ThemeContext)\r\n    return (\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id={id}>\r\n                <button className={`accordion-button ${!expanded && \"collapsed\"} ${darkTheme.darkMode && \"bg-secondary text-light\"}`} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target={`#collapse${id}`} aria-expanded={expanded} aria-controls=\"collapseThree\">\r\n                   {header}\r\n                </button>\r\n            </h2>\r\n            <div id={`collapse${id}`} className={`accordion-collapse collapse ${expanded && \"show\"} ${darkTheme.darkMode && \"bg-secondary text-light\"}`} aria-labelledby={id} data-bs-parent={`#${parentId}`}>\r\n                <div className=\"accordion-body\">\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nAccordionItem.propTypes ={\r\n    header: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    expanded: PropTypes.bool,\r\n    parentId: PropTypes.string.isRequired,\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { ThemeContext } from '../../context/darkmode'\r\nimport { Accordion, AccordionItem } from '../util/Accordion'\r\n\r\nexport const About = () => {\r\n    const context = useContext(ThemeContext)\r\n    return (\r\n        <div style={{ minHeight: \"85.4vh\" }} className={` ${context.darkMode && \"bg-secondary\"}`}>\r\n            <div className=\"container p-4\">\r\n                <Accordion id=\"about\">\r\n                    <AccordionItem id=\"about1\" header=\"A1\" parentId=\"about\" expanded>Some text 1</AccordionItem>\r\n                    <AccordionItem id=\"about2\" header=\"A2\" parentId=\"about\">Some more text</AccordionItem>\r\n                    <AccordionItem id=\"about3\" header=\"A3\" parentId=\"about\">And some more text</AccordionItem>\r\n                </Accordion>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\r\nimport NavbarComponent from './component/item/NavbarComponent';\r\nimport Home from './component/page/Home';\r\nimport Alert from './component/util/Alert';\r\nimport AlertContext from './context/alertContext';\r\nimport { About } from './component/page/About';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { ThemeContext } from './context/darkmode';\r\nimport { useState } from 'react'\r\n\r\nfunction App() {\r\n\tconst [darkMode, setDarkMode] = useState(false)\r\n\tconst [alert, setAlert] = useState(null)\r\n\r\n\tconst showAlert = (msg) => {\r\n\t\tsetAlert(msg)\r\n\t\tsetTimeout(() => setAlert(null), 1500)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<ThemeContext.Provider value={{ darkMode: darkMode, setDarkMode: setDarkMode }} >\r\n\t\t\t<AlertContext.Provider value={showAlert}>\r\n\t\t\t\t<Router basename=\"/TextUtility\" >\r\n\t\t\t\t\t<NavbarComponent />\r\n\t\t\t\t\t<Alert >{alert}</Alert>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route exact path=\"/\">\r\n\t\t\t\t\t\t\t<Home />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route exact path=\"/about\">\r\n\t\t\t\t\t\t\t<About />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</Router>\r\n\t\t\t</AlertContext.Provider>\r\n\t\t</ThemeContext.Provider>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}